---
- hosts: localhost
  tasks:
  - name: Check hive binary exists
    stat:
      path: files/apache-hive-3.1.3-TDP-0.1.0-SNAPSHOT-bin.tar.gz
    register: hive_exists
    failed_when: hive_exists.stat.exists == False

- hosts: postgresql
  become: yes
  become_user: postgres
  tasks:
    - name: Create hive user if not exists
      shell: psql -tc "SELECT 1 FROM pg_user WHERE usename = 'hive'" | grep -q 1 || (echo "CREATE USER hive WITH PASSWORD 'hive';" | psql -U postgres)

    - name: Create hive database if it doesn't exist already
      shell: psql -tc "SELECT 1 FROM pg_database WHERE datname = 'hive'" | grep -q 1 || (echo "CREATE DATABASE hive WITH OWNER = hive;" | psql -U postgres)

    - name: Grant all privileges to hive user on hive database
      shell: echo "GRANT ALL PRIVILEGES ON DATABASE hive TO hive;" | psql -U postgres

- hosts: hive_s2
  become: yes
  tasks:
    - import_role: 
        name: tosit.tdp.hive
      vars:
        realm: REALM.TDP
        kadmin_principal: admin/admin
        kadmin_password: admin
        ranger_admin_password: RangerAdmin123
        hive_jdbc_connector_package: postgresql-jdbc
        hive_ms_db_url: "jdbc:postgresql://{{ groups['postgresql'][0] | tosit.tdp.access_fqdn(hostvars) }}:5432"
        db_type: postgres
        hive_site:
          javax.jdo.option.ConnectionURL: "{{ hive_ms_db_url }}/{{ hive_ms_db_name }}"
          javax.jdo.option.ConnectionDriverName: org.postgresql.Driver
          datanucleus.autoCreateSchema: false
          hive.zookeeper.quorum: "{{ groups['zk'] |  map('tosit.tdp.access_fqdn', hostvars) |  map('regex_replace', '^(.*)$', '\\1:2181') | join(',') | trim}}"
          javax.jdo.option.ConnectionUserName: hive
          javax.jdo.option.ConnectionPassword: hive
          hive.server2.enable.doAs: False

- hosts: "{{ groups['hdfs_nn'][0] }}"
  become: yes
  vars:
    tez_release: tez-0.9.1-TDP-0.1.0-SNAPSHOT
    tez_dist_file: "{{ tez_release }}.tar.gz"
  tasks:
    - name: "Upload {{ tez_dist_file }}"
      copy:
        src: "files/{{ tez_dist_file }}"
        dest: /tmp
      tags: s4

- hosts: hdfs_nn[0]
  become: yes
  vars:
    realm: REALM.TDP
    hadoop_conf_dir: '/etc/hadoop/conf.nn'
  tasks:
    - import_role:
        name: tosit.tdp.hive
        tasks_from: post_install
      tags: s5

- hosts: yarn_nm,yarn_rm
  become: yes
  tasks:
  - name: Ensure hive user on all yarn nodemanagers and resource managers
    user:
      name: hive
      password: '{{ "hive123" | password_hash("sha512", "salt123") }}'
  - name: Generate hive user principal and keytab on all yarn nodemanagers and resource managers
    become: yes
    vars:
    - realm: REALM.TDP
    - kadmin_principal: admin/admin
    - kadmin_password: admin
    shell: |
      kadmin -r {{realm}} -p {{kadmin_principal}} -w {{kadmin_password}} -q "addprinc -randkey hive/{{ ansible_fqdn }}@{{realm}}"
      kadmin -r {{realm}} -p {{kadmin_principal}} -w {{kadmin_password}} -q "xst -k hive.service.keytab hive/{{ ansible_fqdn }}@{{realm}}"
      chown hive:hadoop hive.service.keytab
    args:
      chdir: /etc/security/keytabs
      creates: /etc/security/keytabs/hive.principal.keytab

- hosts: hive_s2
  become: yes
  tasks:
    - name: Start hive-server2
      service:
        name: hive-server2
        state: restarted
      tags: sh
