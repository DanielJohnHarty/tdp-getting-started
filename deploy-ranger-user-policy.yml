---
- hosts: ranger_admin[0]
  become: yes
  vars:
    hdfs_ranger_repository_name: hdfs-tdp
    hive_database: tdp_test_db
    hive_ranger_repository_name: hive-tdp
    hive_user: hive
    ranger_host: "{{ groups['ranger_admin'] |  map('tosit.tdp.access_fqdn', hostvars) | first }}"
    ranger_password: RangerAdmin123
    ranger_username: admin
    ranger_user: tdp-user
    ranger_user_password: tdp-user_123
  tasks:
    - name: "Ranger: get user list"
      uri:
        url: https://{{ ranger_host }}:6182/service/users
        headers:
          Accept: application/json
        url_username: "{{ ranger_username }}"
        url_password: "{{ ranger_password }}"
        force_basic_auth: yes
        return_content: yes
      register: jsoncontent

    - name: Get ranger_user id from list
      vars:
        jmesquery: "vXPortalUsers[? loginId == '{{ ranger_user }}'].id"
      set_fact:
        user_id: "{{ jsoncontent.json | json_query(jmesquery) }}"

    - name: Create user in ranger
      vars:
        create_user:
          {
            "name": "{{ ranger_user }}",
            "firstName": "{{ ranger_user }}",
            "loginId": "{{ ranger_user }}",
            "description": "ranger user",
            "password": "{{ ranger_user_password }}",
            "status": 1,
            "isVisible": 1,
            "userRoleList": ["ROLE_USER"],
            "userSource": 0,
          }
      uri:
        url: https://{{ ranger_host }}:6182/service/xusers/secure/users
        headers:
          Accept: application/json
        body: "{{ create_user | to_json }}"
        body_format: json
        url_username: "{{ ranger_username }}"
        url_password: "{{ ranger_password }}"
        force_basic_auth: yes
        method: POST
        return_content: yes
      when: user_id == []
      register: jsoncontent

    - name: Get ranger_user id from list
      set_fact:
        user_id: "{{ jsoncontent.json.id | int }}"
      when: user_id == []

    - name: "Ranger: get policy list"
      uri:
        url: https://{{ ranger_host }}:6182/service/public/v2/api/policy
        headers:
          Accept: application/json
        url_username: "{{ ranger_username }}"
        url_password: "{{ ranger_password }}"
        force_basic_auth: yes
        return_content: yes
      register: jsoncontent

    - name: Get policy ids
      vars:
        hdfs_policy_query: "[? name == 'hive-user-hdfs-policy'].id"
        hive_policy_query: "[? name == 'tdp-user-hive-policy'].id"
      set_fact:
        hdfs_policy_id: "{{ jsoncontent.json | json_query(hdfs_policy_query) }}"
        hive_policy_id: "{{ jsoncontent.json | json_query(hive_policy_query) }}"


    - name: Create HDFS policy
      vars:
        hdfs_policy:
          {
            "name": "hive-user-hdfs-policy",
            "service": "{{ hdfs_ranger_repository_name }}",
            "repositoryType": "hdfs",
            "description": "Hive Client Check",
            "isEnabled": true,
            "isAuditEnabled": true,
            "resources":
              {
                "path":
                  {
                    "isRecursive": true,
                    "values": ["hdfs:////warehouse"],
                    "isExcludes": false,
                  },
              },
            "policyItems":
              [
                {
                  "users": ["{{ hive_user }}"],
                  "groups": [],
                  "delegateAdmin": true,
                  "accesses":
                    [
                      { "isAllowed": true, "type": "read" },
                      { "isAllowed": true, "type": "write" },
                      { "isAllowed": true, "type": "execute" },
                    ],
                  "conditions": [],
                },
              ],
          }
      uri:
        url: https://{{ ranger_host }}:6182/service/public/v2/api/policy
        headers:
          Accept: application/json
        body: "{{ hdfs_policy | to_json }}"
        body_format: json
        url_username: "{{ ranger_username }}"
        url_password: "{{ ranger_password }}"
        force_basic_auth: yes
        method: POST
      when: hdfs_policy_id == []

    - name: Create Hive policy
      vars:
        hive_policy:
          {
            "name": "tdp-user-hive-policy",
            "service": "{{ hive_ranger_repository_name }}",
            "repositoryType": "hive",
            "description": "Hive Client Check",
            "isEnabled": true,
            "isAuditEnabled": true,
            "resources":
              {
                "database": { "values": ["{{ hive_database }}"], "isExcludes": false },
                "table": { "values": ["*"], "isExcludes": false },
                "column": { "values": ["*"], "isExcludes": false },
              },
            "policyItems":
              [
                {
                  "users": ["{{ ranger_user }}"],
                  "groups": [],
                  "delegateAdmin": true,
                  "accesses":
                    [
                      { "isAllowed": true, "type": "select" },
                      { "isAllowed": true, "type": "update" },
                      { "isAllowed": true, "type": "Create" },
                      { "isAllowed": true, "type": "Drop" },
                      { "isAllowed": true, "type": "Alter" },
                      { "isAllowed": true, "type": "Index" },
                      { "isAllowed": true, "type": "Lock" },
                      { "isAllowed": true, "type": "All" },
                      { "isAllowed": true, "type": "Read" },
                      { "isAllowed": true, "type": "Write" },
                      { "isAllowed": true, "type": "Refresh" },
                    ],
                  "conditions": [],
                },
              ],
          }
      uri:
        url: https://{{ ranger_host }}:6182/service/public/v2/api/policy
        headers:
          Accept: application/json
        body: "{{ hive_policy | to_json }}"
        body_format: json
        url_username: "{{ ranger_username }}"
        url_password: "{{ ranger_password }}"
        force_basic_auth: yes
        method: POST
      when: hive_policy_id == []
